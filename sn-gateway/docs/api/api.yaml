openapi: 3.0.0
info:
  title: User Management API
  description: API for user registration, authentication, and profile management
  version: 1.0.0

servers:
  - url: http://localhost:8000/api
    description: Local development server

paths:
  /v1/users:
    post:
      summary: Register a new user
      description: Creates a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User successfully created
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'auth_token=abc123; HttpOnly; Secure; SameSite=Strict; Path=/; Max-Age=3600'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /v1/auth:
    post:
      summary: Authenticate user
      description: Authenticates a user and sets a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Authentication'
      responses:
        '200':
          description: Authentication successful
          headers:
            Set-Cookie:
              schema:
                type: string
                example: 'auth_token=abc123; HttpOnly; Secure; SameSite=Strict; Path=/; Max-Age=3600'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /v1/users/me:
    get:
      summary: Get current user profile
      description: Returns the profile information of the authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    patch:
      summary: Update user profile
      description: Updates the profile information of the authenticated user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserRegistration:
      type: object
      required:
        - login
        - password
        - email
      properties:
        login:
          type: string
          example: john_doe
        password:
          type: string
          format: password
          example: Pa$$w0rd
        email:
          type: string
          format: email
          example: john.doe@example.com
    
    Authentication:
      type: object
      required:
        - login
        - password
      properties:
        login:
          type: string
          example: john_doe
        password:
          type: string
          format: password
          example: Pa$$w0rd
    
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        expiresIn:
          type: integer
          example: 3600
    
    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        login:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        surname:
          type: string
        dateOfBirth:
          type: string
          format: date
        phoneNumber:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    
    UserUpdate:
      type: object
      properties:
        name:
          type: string
          example: John
        surname:
          type: string
          example: Doe
        dateOfBirth:
          type: string
          format: date
          example: 1990-01-01
        email:
          type: string
          format: email
          example: john.doe@example.com
        phoneNumber:
          type: string
          example: +1-555-123-4567
    
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
